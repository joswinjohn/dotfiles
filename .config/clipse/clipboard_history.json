{"clipboardHistory":[{"value":"udisksctl power-off -b /dev/","recorded":"2025-03-13 18:39:06.943993984","filePath":"null","pinned":false},{"value":"umount /mnt/ntfs","recorded":"2025-03-13 18:13:46.904715819","filePath":"null","pinned":false},{"value":"sync -r --progress --delete-before /mnt/iso/ /mnt/ntfs/","recorded":"2025-03-13 18:13:36.265648897","filePath":"null","pinned":false},{"value":"umount /mnt/vfat","recorded":"2025-03-13 18:12:06.704727349","filePath":"null","pinned":false},{"value":"rsync -r --progress --delete-before /mnt/iso/ /mnt/ntfs/","recorded":"2025-03-13 18:11:46.662374346","filePath":"null","pinned":false},{"value":"mount /dev/sde2 /mnt/ntfs","recorded":"2025-03-13 18:11:39.980525447","filePath":"null","pinned":false},{"value":"mkdir /mnt/ntfs","recorded":"2025-03-13 18:11:21.540129246","filePath":"null","pinned":false},{"value":"mkfs.ntfs --quick -L INSTALL /dev/sde2","recorded":"2025-03-13 18:11:11.080382542","filePath":"null","pinned":false},{"value":"cp /mnt/iso/sources/boot.wim /mnt/vfat/sources/","recorded":"2025-03-13 18:11:03.248603538","filePath":"null","pinned":false},{"value":"mkdir /mnt/vfat/sources","recorded":"2025-03-13 18:10:54.301986970","filePath":"null","pinned":false},{"value":"rsync -r --progress --exclude sources --delete-before /mnt/iso/ /mnt/vfat/","recorded":"2025-03-13 18:10:39.436259493","filePath":"null","pinned":false},{"value":"mount /dev/sde1 /mnt/vfat/","recorded":"2025-03-13 18:10:28.120734738","filePath":"null","pinned":false},{"value":"mkdir /mnt/vfat","recorded":"2025-03-13 18:10:23.309164810","filePath":"null","pinned":false},{"value":"mkfs.vfat -n BOOT /dev/sde1","recorded":"2025-03-13 18:10:14.710228152","filePath":"null","pinned":false},{"value":"mount /home/\u003cyour user\u003e/Downloads/Win11_English_x64v1.iso /mnt/iso/","recorded":"2025-03-13 18:09:44.602184759","filePath":"null","pinned":false},{"value":"mkdir /mnt/iso","recorded":"2025-03-13 18:09:38.388320276","filePath":"null","pinned":false},{"value":"parted /dev/sde unit B print","recorded":"2025-03-13 18:09:29.989049947","filePath":"null","pinned":false},{"value":"quit","recorded":"2025-03-13 18:08:52.250663090","filePath":"null","pinned":false},{"value":"mkpart INSTALL ntfs 1GiB 10GiB","recorded":"2025-03-13 18:08:48.275987715","filePath":"null","pinned":false},{"value":"mkpart BOOT fat32 0% 1GiB","recorded":"2025-03-13 18:08:43.907257694","filePath":"null","pinned":false},{"value":"mklabel gpt","recorded":"2025-03-13 18:06:11.282559688","filePath":"null","pinned":false},{"value":"parted /dev/","recorded":"2025-03-13 18:06:06.531996092","filePath":"null","pinned":false},{"value":"wipefs -a /dev","recorded":"2025-03-13 18:05:51.529805673","filePath":"null","pinned":false},{"value":"dmesg | tail -50","recorded":"2025-03-13 18:05:38.817257338","filePath":"null","pinned":false},{"value":"#include \u003ccstdio\u003e\n#include \u003ccstdlib\u003e\n#include \u003cGLES2/gl2.h\u003e\n#include \u003cEGL/egl.h\u003e\n\n#include \u003cGLFW/glfw3.h\u003e\n\n#define MAJOR_VER 3\n#define MINOR_VER 3\n\n#define BACKGROUND_COLOR 0.043F, 0.035F, 0.050F, 1.0F\n\nclass glfw {\npublic:\n    // assign ..structors as default due to non-default deconstructor (suggested by clang-tidy)\n    glfw(const glfw\u0026) = default;\n    glfw(glfw\u0026\u0026) = delete;\n    glfw\u0026 operator=(const glfw\u0026) = default;\n    glfw\u0026 operator=(glfw\u0026\u0026) = delete;\n\n    // exit glfw windows on deconstruction\n    ~glfw() {\n        glfwTerminate();\n    }\n\n    // initialize glfw\n    static void init() {\n        glfwInit();\n\n        glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, MAJOR_VER);\n        glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, MINOR_VER);\n\n        glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n    }\n\n    // explicit exit\n    static void exit(const int exit_code) {\n        glfwTerminate();\n        std::exit(exit_code);\n    }\n\n    static void framebuffer_size_callback([[maybe_unused]] GLFWwindow* window, int width, int height)\n    {\n        glViewport(0, 0, width, height);\n    }\n};\n\nstruct window {\n    GLFWwindow* winptr = nullptr;\n    int view_height;\n    int view_width;\n\n    // initialize window\n    window(int h, int w, const char* window_name) {\n        // create window\n        winptr = glfwCreateWindow(w, h, window_name, nullptr, nullptr);\n\n        // assign width and height\n        view_height = h;\n        view_width = w;\n\n        if (winptr == nullptr) {\n            // get gl error if window fails to start\n            const char* err = nullptr;\n            glfwGetError(\u0026err);\n            printf(\"GLFW window failed: %s\", err);\n\n            // exit due to window error\n            glfw::exit(-1);\n        }\n    }\n\n    // run once on initialize\n    void start() const {\n        \n        // set window size\n        glViewport(0, 0, view_width, view_height);\n        glfwMakeContextCurrent(winptr);\n\n        // change viewport size on resize\n        glfwSetFramebufferSizeCallback(winptr, glfw::framebuffer_size_callback);\n\n        // start update loop\n        while(glfwWindowShouldClose(winptr) == 0) {\n            update();\n        }\n\n        // exit glfw safely\n        glfw::exit(-1);\n    }\n    \n    // run on every update\n    void update() const {\n        glClearColor(BACKGROUND_COLOR);\n        glClear(GL_COLOR_BUFFER_BIT);\n\n        glfwSwapBuffers(winptr);\n        glfwPollEvents();\n    }\n};\n","recorded":"2025-03-13 17:48:49.424505760","filePath":"null","pinned":false},{"value":"\n","recorded":"2025-03-13 17:48:20.351503504","filePath":"null","pinned":false},{"value":"    // run on every update\n    void update() const {\n        glClearColor(BACKGROUND_COLOR);\n        glClear(GL_COLOR_BUFFER_BIT);\n\n        glfwSwapBuffers(winptr);\n        glfwPollEvents();\n    }\n","recorded":"2025-03-13 17:48:15.799667482","filePath":"null","pinned":false},{"value":"            update_overload();\n","recorded":"2025-03-13 17:48:08.927843903","filePath":"null","pinned":false},{"value":"    int view_width;\n\n","recorded":"2025-03-13 17:48:02.980857626","filePath":"null","pinned":false},{"value":"    // set by\n    void update_overload() const {}\n","recorded":"2025-03-13 17:48:02.104279591","filePath":"null","pinned":false},{"value":"\n    void set_update(void (*f)()) {\n","recorded":"2025-03-13 17:47:57.839989759","filePath":"null","pinned":false},{"value":"    f();\n    }\n","recorded":"2025-03-13 17:47:56.940091456","filePath":"null","pinned":false},{"value":"            \n","recorded":"2025-03-13 17:44:44.865984243","filePath":"null","pinned":false},{"value":"glClearColor(BACKGROUND_COLOR);\n            glClear(GL_COLOR_BUFFER_BIT);\n\n            glfwSwapBuffers(winptr);\n            glfwPollEvents();","recorded":"2025-03-13 17:44:34.253970422","filePath":"null","pinned":false},{"value":"    void update() const {}\n\n","recorded":"2025-03-13 17:43:36.943178102","filePath":"null","pinned":false},{"value":"    void update() const {}\n","recorded":"2025-03-13 17:43:34.684878454","filePath":"null","pinned":false},{"value":"glClearColor(BACKGROUND_COLOR);\n        glClear(GL_COLOR_BUFFER_BIT);\n\n        glfwSwapBuffers(winptr);\n        glfwPollEvents();","recorded":"2025-03-13 17:41:44.865109841","filePath":"null","pinned":false},{"value":"default-cache-ttl 3600\n","recorded":"2025-03-12 23:49:47.630241773","filePath":"null","pinned":false},{"value":"default-cache-ttl 3600","recorded":"2025-03-12 23:47:54.303849178","filePath":"null","pinned":false},{"value":"~/.gnupg/gpg-agent.conf","recorded":"2025-03-12 23:46:30.601141458","filePath":"null","pinned":false},{"value":"perf","recorded":"2025-03-12 23:42:09.149422140","filePath":"null","pinned":false},{"value":"#","recorded":"2025-03-12 23:39:19.503051028","filePath":"null","pinned":false},{"value":"#\n","recorded":"2025-03-12 23:39:16.495131570","filePath":"null","pinned":false},{"value":"# momin\n# jp2a --size=60x20 --colors --color-depth=24 IMG_1855.jpg\n","recorded":"2025-03-12 23:39:11.401436149","filePath":"null","pinned":false},{"value":"[ -f ~/.bashrc ] \u0026\u0026 echo -e '\\nexport GPG_TTY=$(tty)' \u003e\u003e ~/.bashrc","recorded":"2025-03-12 23:38:50.282618103","filePath":"null","pinned":false},{"value":"[ -f ~/.bashrc ] \u0026\u0026 echo -e '\\nexport GPG_TTY=$(tty)' \u003e\u003e ~/.bashrc\n","recorded":"2025-03-12 23:38:33.400572698","filePath":"null","pinned":false},{"value":"git config --global tag.gpgSign true","recorded":"2025-03-12 23:38:28.145084848","filePath":"null","pinned":false},{"value":"git config --global commit.gpgsign true","recorded":"2025-03-12 23:38:25.145732938","filePath":"null","pinned":false},{"value":"A4931BE4EAA4E990","recorded":"2025-03-12 23:38:19.794977665","filePath":"null","pinned":false},{"value":"git config --global user.signingkey","recorded":"2025-03-12 23:38:12.683129730","filePath":"null","pinned":false},{"value":"git config --global --unset gpg.format","recorded":"2025-03-12 23:37:58.071238730","filePath":"null","pinned":false},{"value":"-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmDMEZ9JSQxYJKwYBBAHaRw8BAQdAIq9v+2popR5EZ2K2pwYYwtjpi9Fe8U0xga5u\nv6dIfv60I0pvc3dpbiBKb2huIDxqb3N3aW5qb2huM0BnbWFpbC5jb20+iJMEExYK\nADsWIQTJQPqYuIcP7/+9z92kkxvk6qTpkAUCZ9JSQwIbAwULCQgHAgIiAgYVCgkI\nCwIEFgIDAQIeBwIXgAAKCRCkkxvk6qTpkJZcAP4sdbqjEY3YJmWr+dddInPPPo7Q\nE71iu7+sRX6jr08JaQEA1xcBlNfy32qE6+oRiz9SOb2VvwwqqNBHkioFMzQ58wO4\nOARn0lJDEgorBgEEAZdVAQUBAQdADDyb0Nn9LGhEnHfUcSYMYldS2icibv7zLpD2\n4eYtPhYDAQgHiHgEGBYKACAWIQTJQPqYuIcP7/+9z92kkxvk6qTpkAUCZ9JSQwIb\nDAAKCRCkkxvk6qTpkADXAQC5CinngSvSYktPhOmu0E5UlUHyrFAfU3CpSluSgPyQ\nJgEA9OtDcnHVO8IyW51e9s7Znj2ZNlLfKpnxT5B2Dw1E8w0=\n=SI6R\n-----END PGP PUBLIC KEY BLOCK-----","recorded":"2025-03-12 23:35:58.227218898","filePath":"null","pinned":false},{"value":"gpg --armor --export","recorded":"2025-03-12 23:35:50.891598841","filePath":"null","pinned":false},{"value":"gpg --list-secret-keys --keyid-format=long","recorded":"2025-03-12 23:34:58.412380896","filePath":"null","pinned":false},{"value":"gpg --full-generate-key","recorded":"2025-03-12 23:33:25.443037224","filePath":"null","pinned":false},{"value":"gpg --full-gen-key","recorded":"2025-03-12 23:32:22.130854281","filePath":"null","pinned":false},{"value":"git config commit.gpgsign true","recorded":"2025-03-12 23:30:59.257517924","filePath":"null","pinned":false},{"value":"src refspec main does not match any","recorded":"2025-03-12 23:21:39.163732527","filePath":"null","pinned":false},{"value":"refspec main does not match any","recorded":"2025-03-12 23:19:29.590224748","filePath":"null","pinned":false},{"value":".\n","recorded":"2025-03-12 23:16:07.006796365","filePath":"null","pinned":false},{"value":"This is the Jengine \n","recorded":"2025-03-12 23:16:05.284469484","filePath":"null","pinned":false},{"value":"Jengine is a physics simulation engine built from scratch, using no libraries other than GLFW, GLAD to use OpenGL.\n","recorded":"2025-03-12 23:15:46.976097654","filePath":"null","pinned":false},{"value":"unsigned int VBO;\n","recorded":"2025-03-12 23:15:03.245788931","filePath":"null","pinned":false},{"value":"VBO","recorded":"2025-03-12 23:14:47.613201231","filePath":"null","pinned":false},{"value":"    };\n","recorded":"2025-03-12 23:11:13.045048114","filePath":"null","pinned":false},{"value":"\n    win.update() = {\n        printf(\"blad\");\n","recorded":"2025-03-12 23:11:12.426497769","filePath":"null","pinned":false},{"value":"\n\n","recorded":"2025-03-12 23:10:54.834241815","filePath":"null","pinned":false},{"value":"            glClearColor(BACKGROUND_COLOR);\n            glClear(GL_COLOR_BUFFER_BIT);\n\n            glfwSwapBuffers(winptr);\n            glfwPollEvents();\n","recorded":"2025-03-12 23:10:48.259333817","filePath":"null","pinned":false},{"value":"        glClearColor(BACKGROUND_COLOR);\n        glClear(GL_COLOR_BUFFER_BIT);\n\n        glfwSwapBuffers(winptr);\n        glfwPollEvents();\n","recorded":"2025-03-12 23:03:48.914511584","filePath":"null","pinned":false},{"value":"https://mangatoto.com/v3x","recorded":"2025-03-12 18:54:55.592302478","filePath":"null","pinned":false},{"value":"glfw.html","recorded":"2025-03-12 18:53:17.420483676","filePath":"null","pinned":false},{"value":"// define using config file when implimented\n","recorded":"2025-03-12 18:15:16.219495139","filePath":"null","pinned":false},{"value":".043, 0.035, 0.050\n","recorded":"2025-03-12 18:14:39.705520589","filePath":"null","pinned":false},{"value":"l","recorded":"2025-03-12 18:14:33.657310328","filePath":"null","pinned":false},{"value":"g","recorded":"2025-03-12 18:14:32.025613931","filePath":"null","pinned":false},{"value":"ClearColor(0.2f, 0.3f, 0.3f, 1.0f);","recorded":"2025-03-12 18:14:29.621987142","filePath":"null","pinned":false},{"value":"0.043, 0.035, 0.050","recorded":"2025-03-12 18:13:26.736651750","filePath":"null","pinned":false},{"value":"11, 9, 13","recorded":"2025-03-12 18:13:11.258262979","filePath":"null","pinned":false},{"value":"glClearColor(0.2f, 0.3f, 0.3f, 1.0f);","recorded":"2025-03-12 18:11:51.678452404","filePath":"null","pinned":false},{"value":"    void processInput(GLFWwindow *window) {\n        if(glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)\n            glfwSetWindowShouldClose(window, true);\n    }\n","recorded":"2025-03-12 18:11:38.616139167","filePath":"null","pinned":false},{"value":"\nvoid processInput(GLFWwindow *window)\n{\n    if(glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)\n        glfwSetWindowShouldClose(window, true);\n}","recorded":"2025-03-12 18:11:13.473466444","filePath":"null","pinned":false},{"value":"framebuffer_size_callback","recorded":"2025-03-12 18:08:10.366544646","filePath":"null","pinned":false},{"value":"    \n    glfwTerminate();\n","recorded":"2025-03-12 18:05:40.411263618","filePath":"null","pinned":false},{"value":"\n            }\n","recorded":"2025-03-12 18:05:37.573703809","filePath":"null","pinned":false},{"value":"    while (glfwWindowShouldClose(win.winptr) == 0)\n    {\n","recorded":"2025-03-12 18:05:36.576471165","filePath":"null","pinned":false},{"value":"glClear(GL_COLOR_BUFFER_BIT);\n\n        glfwSwapBuffers(win.winptr);\n        glfwPollEvents();\n","recorded":"2025-03-12 18:05:21.810095804","filePath":"null","pinned":false},{"value":"height ","recorded":"2025-03-12 18:00:25.607176474","filePath":"null","pinned":false},{"value":"        view_height = h;\n","recorded":"2025-03-12 18:00:22.742568793","filePath":"null","pinned":false},{"value":",","recorded":"2025-03-12 17:59:32.346245434","filePath":"null","pinned":false},{"value":"window","recorded":"2025-03-12 17:58:20.869536947","filePath":"null","pinned":false},{"value":"        \n        // set window size\n        glViewport(0, 0, w, h);\n        glfwMakeContextCurrent(winptr);\n\n        // change window size on resize\n        glfwSetFramebufferSizeCallback(winptr, glfw::framebuffer_size_callback);\n","recorded":"2025-03-12 17:57:52.624652094","filePath":"null","pinned":false},{"value":"        while(!glfwWindowShouldClose(winptr)) {\n\n        }\n","recorded":"2025-03-12 17:56:59.354875048","filePath":"null","pinned":false},{"value":"    glfw::init();\n","recorded":"2025-03-12 17:54:22.007841571","filePath":"null","pinned":false},{"value":"        glfwMakeContextCurrent(winptr);\n","recorded":"2025-03-12 17:53:44.599786354","filePath":"null","pinned":false},{"value":"glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);","recorded":"2025-03-12 17:53:11.258152146","filePath":"null","pinned":false},{"value":"\n      \n\n","recorded":"2025-03-12 17:52:43.004841354","filePath":"null","pinned":false},{"value":"void framebuffer_size_callback(GLFWwindow* window, int width, int height)\n    {\n        glViewport(0, 0, width, height);\n    }","recorded":"2025-03-12 17:52:34.938019980","filePath":"null","pinned":false},{"value":"void framebuffer_size_callback(GLFWwindow* window, int width, int height)\n{\n    glViewport(0, 0, width, height);\n}  \n","recorded":"2025-03-12 17:51:43.608565992","filePath":"null","pinned":false},{"value":"void framebuffer_size_callback(GLFWwindow* window, int width, int height);","recorded":"2025-03-12 17:51:09.069946114","filePath":"null","pinned":false},{"value":"        \n","recorded":"2025-03-12 17:47:15.499426240","filePath":"null","pinned":false},{"value":"cppcoreguidelines-prefer-member-initializer","recorded":"2025-03-12 17:46:57.201987360","filePath":"null","pinned":false},{"value":"modernize-use-default-member-init","recorded":"2025-03-12 17:46:27.547527911","filePath":"null","pinned":false},{"value":"readability-identifier-length","recorded":"2025-03-12 13:53:56.584798632","filePath":"null","pinned":false},{"value":"Jengine","recorded":"2025-03-12 13:53:07.292476031","filePath":"null","pinned":false},{"value":"\"","recorded":"2025-03-12 13:53:06.707994780","filePath":"null","pinned":false},{"value":"WINDOW_HEIGHT","recorded":"2025-03-12 13:53:00.844779926","filePath":"null","pinned":false},{"value":" ","recorded":"2025-03-12 13:53:00.009157305","filePath":"null","pinned":false},{"value":"WINDOW_WIDTH","recorded":"2025-03-12 13:52:56.606165678","filePath":"null","pinned":false},{"value":"    GLFWwindow* win = glfwCreateWindow(WINDOW_WIDTH, WINDOW_HEIGHT, \"Jengine\", nullptr, nullptr);\n    if (win == nullptr) {\n        const char* err = nullptr;\n        int code = glfwGetError(\u0026err);\n        printf(\"GLFW failure: %s (%d)\", err, code);\n        glfwTerminate();\n        return -1;\n    }\n\n    glfwMakeContextCurrent(win);\n\n    glViewport(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT);\n","recorded":"2025-03-12 13:52:00.565132992","filePath":"null","pinned":false},{"value":"    glfwInit();\n\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n\n    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n","recorded":"2025-03-12 13:51:23.840098133","filePath":"null","pinned":false},{"value":"        glfwInit();\n\n        glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, MAJOR_VER);\n        glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, MINOR_VER);\n\n        glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n","recorded":"2025-03-12 13:48:53.263676300","filePath":"null","pinned":false},{"value":"MAJOR","recorded":"2025-03-12 13:48:21.478758760","filePath":"null","pinned":false},{"value":"3","recorded":"2025-03-12 13:48:13.832414056","filePath":"null","pinned":false},{"value":"include \u003cGLFW/glfw3.h\u003e\n","recorded":"2025-03-12 13:46:03.961807680","filePath":"null","pinned":false},{"value":"#include \u003cGLES2/gl2.h\u003e\n#include \u003cEGL/egl.h\u003e\n\n#include \u003cGLFW/glfw3.h\u003e\n","recorded":"2025-03-12 13:45:54.434198567","filePath":"null","pinned":false},{"value":"#include \"lib.hpp\"\n","recorded":"2025-03-12 13:42:13.023965842","filePath":"null","pinned":false},{"value":"    std::cout \u003c\u003c message \u003c\u003c '\\n';\n","recorded":"2025-03-12 13:42:05.625149072","filePath":"null","pinned":false},{"value":"    const std::string message = \"Hello from \" + lib.name + \"!\";\n","recorded":"2025-03-12 13:42:05.097840995","filePath":"null","pinned":false},{"value":"    auto const lib = library {};\n","recorded":"2025-03-12 13:42:03.691942678","filePath":"null","pinned":false},{"value":"ASEAN","recorded":"2025-03-12 13:24:22.307725658","filePath":"null","pinned":false},{"value":"https://wcpss.instructure.com/courses/1137438/pages/epf-week-of-3-slash-10-3-slash-14?module_item_id=65885131","recorded":"2025-03-12 12:51:53.721043425","filePath":"null","pinned":false},{"value":"bindsym XF86MonBrightnessUp exec --no-startup-id brightnessctl set +10%\nbindsym XF86MonBrightnessDown exec --no-startup-id brightnessctl set 10%-","recorded":"2025-03-12 12:48:41.675060433","filePath":"null","pinned":false},{"value":"description","recorded":"2025-03-12 12:30:23.842407151","filePath":"null","pinned":false},{"value":"sudo pacman -S sdl_mixer ncurses","recorded":"2025-03-12 09:26:41.071274726","filePath":"null","pinned":false},{"value":"tetriscurses","recorded":"2025-03-12 09:16:04.382739884","filePath":"null","pinned":false},{"value":"autoload -Uz tetriscurses\n\n","recorded":"2025-03-12 09:16:01.036606325","filePath":"null","pinned":false},{"value":"cppcoreguidelines-pro-type-vararg","recorded":"2025-03-12 09:12:17.482251217","filePath":"null","pinned":false},{"value":"I18N","recorded":"2025-03-12 09:11:38.379286705","filePath":"null","pinned":false},{"value":"#include \u003cstring\u003e\n","recorded":"2025-03-12 09:09:35.798979084","filePath":"null","pinned":false},{"value":"  -modernize-*, \\\n","recorded":"2025-03-12 09:09:30.164995904","filePath":"null","pinned":false},{"value":"modernize-use-trailing-return-type","recorded":"2025-03-12 09:08:58.844203518","filePath":"null","pinned":false},{"value":"'modernize-*,-modernize-avoid-c-arrays'","recorded":"2025-03-12 09:07:16.340501002","filePath":"null","pinned":false},{"value":"  -modernize-use-nodiscard,\\\n","recorded":"2025-03-12 09:06:30.892095659","filePath":"null","pinned":false},{"value":"    GLFWmonitor* primary = glfwGetPrimaryMonitor();\n","recorded":"2025-03-12 09:03:53.368179750","filePath":"null","pinned":false},{"value":"\n    glViewport(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT);\n","recorded":"2025-03-12 09:03:02.969499964","filePath":"null","pinned":false},{"value":"    glfwMaximizeWindow(win);\n","recorded":"2025-03-12 09:02:38.638900879","filePath":"null","pinned":false},{"value":"        /* Poll for and process events */\n","recorded":"2025-03-12 09:01:59.748667957","filePath":"null","pinned":false},{"value":"        /* Swap front and back buffers */\n","recorded":"2025-03-12 09:01:59.079610094","filePath":"null","pinned":false},{"value":"        /* Render here */\n","recorded":"2025-03-12 09:01:58.322586378","filePath":"null","pinned":false},{"value":"while (!glfwWindowShouldClose(window))\n    {\n        /* Render here */\n        glClear(GL_COLOR_BUFFER_BIT);\n\n        /* Swap front and back buffers */\n        glfwSwapBuffers(window);\n\n        /* Poll for and process events */\n        glfwPollEvents();\n    }\n","recorded":"2025-03-12 09:01:44.553207737","filePath":"null","pinned":false},{"value":"        std::cout \u003c\u003c \"GLFW failure: \" \u003c\u003c description \u003c\u003c \" (\" \u003c\u003c code \u003c\u003c \")\" \u003c\u003c '\\n';\n","recorded":"2025-03-12 08:59:54.093509363","filePath":"null","pinned":false},{"value":"int erc = glfwGetError(nullptr);","recorded":"2025-03-12 08:58:15.587557510","filePath":"null","pinned":false},{"value":"const char* description;\nint code = glfwGetError(\u0026description);","recorded":"2025-03-12 08:58:12.342879968","filePath":"null","pinned":false},{"value":"johninstall","recorded":"2025-03-12 08:51:54.384430938","filePath":"null","pinned":false},{"value":"          .lll'              ▐  1659 (pacman), 37 (flatpak) \n            .,lllc,.            ▐  zsh 5.9 ","recorded":"2025-03-12 08:39:51.249932096","filePath":"null","pinned":false},{"value":"             .lll'              ▐  1659 (pacman), 37 (flatpak) \n            .,lllc,.            ▐  zsh 5.9 ","recorded":"2025-03-12 08:39:48.163632915","filePath":"null","pinned":false},{"value":"            .,lllc,.            ▐  zsh 5.9 ","recorded":"2025-03-12 08:39:44.056511626","filePath":"null","pinned":false},{"value":"         .lll'              ▐  1659 (pacman), 37 (flatpak) \n            .,lllc,.            ▐  zsh 5.9 ","recorded":"2025-03-12 08:39:40.262155841","filePath":"null","pinned":false},{"value":"llllllllllll'              ▐  6.13.6-arch1-1 \n             .lll'              ▐  1659 (pacman), 37 (flatpak) \n            .,lllc,.            ▐  zsh 5.9 ","recorded":"2025-03-12 08:39:37.116426921","filePath":"null","pinned":false},{"value":"\n             .lll'              ▐  1659 (pacman), 37 (flatpak) \n            .,lllc,.            ▐  zs","recorded":"2025-03-12 08:39:34.035967925","filePath":"null","pinned":false},{"value":"\n    .llllllllllll'              ▐  6.13.6-arch1-1 \n             .lll'              ▐  1659 (pacman), 37 (flatpak) ","recorded":"2025-03-12 08:39:28.173652906","filePath":"null","pinned":false},{"value":"in  4 Feb 00:00 profiles\ndrwxr-xr-x    - joswin 14 Feb 10:32 school","recorded":"2025-03-12 08:39:01.848911042","filePath":"null","pinned":false},{"value":"git/Jengine/","recorded":"2025-03-12 08:26:15.337689915","filePath":"null","pinned":false},{"value":"nullpt","recorded":"2025-03-12 08:24:55.707727948","filePath":"null","pinned":false},{"value":"GLFWmonitor* primary = glfwGetPrimaryMonitor()","recorded":"2025-03-12 08:24:44.860386707","filePath":"null","pinned":false},{"value":"auto main() -\u003e int\n","recorded":"2025-03-12 08:22:12.545283666","filePath":"null","pinned":false},{"value":"add_dependencies(Jengine_lib OpenGL::OpenGL)\n","recorded":"2025-03-12 08:16:33.991176467","filePath":"null","pinned":false},{"value":"Jengine_lib","recorded":"2025-03-12 08:15:24.122554666","filePath":"null","pinned":false},{"value":"target_link_libraries(testas OpenGL::OpenGL","recorded":"2025-03-12 08:15:14.373276840","filePath":"null","pinned":false},{"value":"add_dependencies(testas OpenGL::OpenGL)\n","recorded":"2025-03-12 08:15:09.362039813","filePath":"null","pinned":false},{"value":"find_package(OpenGL REQUIRED COMPONENTS OpenGL)\n","recorded":"2025-03-12 08:14:57.771095062","filePath":"null","pinned":false},{"value":"undefined reference to `glViewport'","recorded":"2025-03-12 08:12:59.360917819","filePath":"null","pinned":false},{"value":"    gladLoadGL();\n","recorded":"2025-03-12 08:12:01.140864757","filePath":"null","pinned":false},{"value":"lib/external/glad/src/glad.c)","recorded":"2025-03-12 08:11:35.258223419","filePath":"null","pinned":false},{"value":"    \"glad\"\n","recorded":"2025-03-12 08:11:13.955069371","filePath":"null","pinned":false},{"value":"#include \u003cGLES2/gl2.h\u003e\n#include \u003cEGL/egl.h\u003e\n","recorded":"2025-03-12 08:10:23.232601862","filePath":"null","pinned":false},{"value":"height","recorded":"2025-03-12 08:08:32.277956624","filePath":"null","pinned":false},{"value":"        return nullptr;\n","recorded":"2025-03-12 08:07:57.506772333","filePath":"null","pinned":false},{"value":"v_minor","recorded":"2025-03-12 08:06:20.268798099","filePath":"null","pinned":false},{"value":"window_name","recorded":"2025-03-12 08:04:48.063361707","filePath":"null","pinned":false},{"value":"glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, v_major);\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, v_minor);\n\n    glfwWindowHint(GLFW_OPENGL_PROFILE, profile);\n\n    GLFWwindow* win = glfwCreateWindow(width, height, window_name, NULL, NULL);\n    if (win == NULL) {\n        std::cout \u003c\u003c \"GLFW failure\" \u003c\u003c std::endl;\n        glfwTerminate();\n        return nullptr;\n    }\n\n    glfwMakeContextCurrent(win);\n\n    gladLoadGL();\n\n    glfwMaximizeWindow(win);\n\n    glViewport(0, 0, width, height);","recorded":"2025-03-12 08:04:16.741651546","filePath":"null","pinned":false},{"value":"#include \u003cglad/glad.h\u003e\n","recorded":"2025-03-12 08:02:13.515269174","filePath":"null","pinned":false},{"value":"target_link_libraries(Jengine_lib PRIVATE glad::glad)\n","recorded":"2025-03-12 07:58:59.948830861","filePath":"null","pinned":false},{"value":"https://glad.dav1d.de/generated/tmpo5nod_bsglad/glad.zip","recorded":"2025-03-12 07:56:02.682320133","filePath":"null","pinned":false},{"value":"https://glad.dav1d.de/#language=c\u0026specification=gl\u0026api=gl%3D4.6\u0026api=gles1%3D1.0\u0026api=gles2%3D3.2\u0026api=glsc2%3Dnone\u0026profile=core\u0026loader=on","recorded":"2025-03-12 07:55:42.666923691","filePath":"null","pinned":false},{"value":"glsc2","recorded":"2025-03-12 07:52:05.236706600","filePath":"null","pinned":false},{"value":"https://github.com/Dav1dde/glad","recorded":"2025-03-12 07:50:51.411099993","filePath":"null","pinned":false},{"value":"find_package(glad REQUIRED)\n","recorded":"2025-03-12 07:49:36.576774842","filePath":"null","pinned":false},{"value":"include(vcpkg.cmake)\n\n","recorded":"2025-03-12 07:49:21.000420737","filePath":"null","pinned":false},{"value":"/home/joswin/.local/share/vcpkg","recorded":"2025-03-12 07:46:29.965881812","filePath":"null","pinned":false},{"value":"\ninclude(vcpkg.cmake)\n","recorded":"2025-03-12 07:36:49.775719471","filePath":"null","pinned":false},{"value":"Could not find .vcpkg-root","recorded":"2025-03-12 07:36:17.534479559","filePath":"null","pinned":false},{"value":"target_link_libraries(main PRIVATE glad::glad)","recorded":"2025-03-12 07:34:05.403830128","filePath":"null","pinned":false},{"value":"find_package(glm CONFIG REQUIRED)\n    target_link_libraries(main PRIVATE glm::glm)","recorded":"2025-03-12 07:33:19.512895102","filePath":"null","pinned":false},{"value":"  find_package(glfw3 CONFIG REQUIRED)\n  target_link_libraries(main PRIVATE glfw)","recorded":"2025-03-12 07:27:41.377871079","filePath":"null","pinned":false},{"value":"ind_package(glfw3 CONFIG REQUIRED)\n  target_link_libraries(main PRIVATE glfw)\n\nglfw3 provides pkg-config modules:","recorded":"2025-03-12 07:27:37.508136237","filePath":"null","pinned":false},{"value":"/","recorded":"2025-03-12 07:23:21.091306227","filePath":"null","pinned":false},{"value":"source","recorded":"2025-03-12 07:23:18.720306865","filePath":"null","pinned":false},{"value":"cssssss","recorded":"2025-03-12 07:23:05.897316551","filePath":"null","pinned":false},{"value":"ource","recorded":"2025-03-12 07:22:31.398926025","filePath":"null","pinned":false},{"value":"```\n\n","recorded":"2025-03-12 07:20:41.202844910","filePath":"null","pinned":false},{"value":"# Licensing\n\n\u003c!--\nPlease go to https://choosealicense.com/licenses/ and choose a license that\nfits your needs. The recommended license for a project of this type is the\nGNU AGPLv3.\n--\u003e\n","recorded":"2025-03-12 07:20:40.016563037","filePath":"null","pinned":false},{"value":"# Contributing\n\n","recorded":"2025-03-12 07:20:38.344138189","filePath":"null","pinned":false},{"value":"See the [CONTRIBUTING](CONTRIBUTING.md) document.\n","recorded":"2025-03-12 07:20:37.698198297","filePath":"null","pinned":false},{"value":"See the [BUILDING](BUILDING.md) document.\n","recorded":"2025-03-12 07:19:54.548847673","filePath":"null","pinned":false},{"value":"Joswin#5dlmo","recorded":"2025-03-11 20:47:52.831456079","filePath":"null","pinned":false},{"value":"DXVK_ENABLE_NVAPI=1 DXVK_FRAME_RATE=141 PROTON_HIDE_NVIDIA_GPU=0 WINE_HIDE_NVIDIA_GPU=0 __GL_SHADER_DISK_CACHE_SKIP_CLEANUP=1 gamemoderun %command% -dx11","recorded":"2025-03-11 20:31:47.460035486","filePath":"null","pinned":false},{"value":"ERROR: Neither a subproject directory nor a wayland-protocols.wrap file was found.","recorded":"2025-03-11 19:49:14.052526755","filePath":"null","pinned":false},{"value":"wayland-protocols.wrap","recorded":"2025-03-11 19:49:12.304914906","filePath":"null","pinned":false},{"value":"eudev-libudev-devel libdrm-devel libgbm-devel libglvnd-devel libinput-devel libseat-devel libxcb-devel libxkbcommon-devel pixman-devel wayland-devel wayland-protocols xcb-util-cursor-devel xcb-util-devel xcb-util-errors-devel xcb-util-image-devel xcb-util-keysyms-devel xcb-util-renderutil-devel xcb-util-wm-devel xcb-util-xrm-devel xorg-server-xwayland pkg-config","recorded":"2025-03-11 19:48:07.430260429","filePath":"null","pinned":false},{"value":"Neither a subproject directory nor a wayland-protocols.wrap file was found.","recorded":"2025-03-11 19:47:37.225543715","filePath":"null","pinned":false},{"value":"meson build","recorded":"2025-03-11 19:46:45.406224033","filePath":"null","pinned":false},{"value":"git submodule update --init","recorded":"2025-03-11 19:46:42.126806584","filePath":"null","pinned":false},{"value":"https://github.com/ValveSoftware/gamescope","recorded":"2025-03-11 19:46:18.350337439","filePath":"null","pinned":false},{"value":"git clone --depth 1 --branch","recorded":"2025-03-11 19:45:54.251160077","filePath":"null","pinned":false},{"value":"meson install -C build","recorded":"2025-03-11 19:44:27.728803787","filePath":"null","pinned":false},{"value":"ninja -C build","recorded":"2025-03-11 19:44:09.180787648","filePath":"null","pinned":false},{"value":"meson setup build","recorded":"2025-03-11 19:44:05.662696701","filePath":"null","pinned":false},{"value":"git submodule update","recorded":"2025-03-11 19:44:01.343444000","filePath":"null","pinned":false},{"value":"meson setup build/","recorded":"2025-03-11 19:43:58.500129791","filePath":"null","pinned":false},{"value":"https://github.com/ValveSoftware/gamescope/archive/refs/tags/3.13.16.9.zip","recorded":"2025-03-11 19:43:11.074633746","filePath":"null","pinned":false},{"value":"gamescope --backend sdl -w 1920 -h 1080 -W 2560 -H 1440 -F fsr -r 165 -- vkcube","recorded":"2025-03-11 19:42:28.189757309","filePath":"null","pinned":false},{"value":"vkroots","recorded":"2025-03-11 19:42:07.234949383","filePath":"null","pinned":false},{"value":"/usr/bin/gamescope -e --xwayland-count 2 -O *,eDP-1 --default-touch-mode 4 --hide-cursor-delay 3000 --fade-out-duration 200 -R /run/user/1000/gamescope.bg228Us/startup.socket -T /run/user/1000/gamescope.bg228Us/stats.pipe -- steam -gamepadui -steamos3 -steampal -steamdeck","recorded":"2025-03-11 19:40:21.756840407","filePath":"null","pinned":false},{"value":"vulkan: vkGetPhysicalDeviceFormatProperties2 returned zero modifiers for DRM format 0x38344258","recorded":"2025-03-11 19:39:45.051341132","filePath":"null","pinned":false},{"value":"mutter","recorded":"2025-03-11 19:39:17.873830364","filePath":"null","pinned":false},{"value":"sudo ln -s /usr/lib/libdisplay-info.so /usr/lib/libdisplay-info.so.1","recorded":"2025-03-11 19:37:37.078599495","filePath":"null","pinned":false},{"value":"pacman -U https://archive.archlinux.org/packages/l/libdisplay-info/libdisplay-info-0.1.1-3-x86_64.pkg.tar.zst","recorded":"2025-03-11 19:36:35.729571471","filePath":"null","pinned":false},{"value":"libdisplay-info.so=1-64","recorded":"2025-03-11 19:36:18.056997460","filePath":"null","pinned":false},{"value":"gamescope-3.13.16-1-x86_64.pkg.tar.zst","recorded":"2025-03-11 19:35:58.468879765","filePath":"null","pinned":false},{"value":"gamescope-3.13.16-1-x86_64.pkg.tar.z","recorded":"2025-03-11 19:35:54.319026233","filePath":"null","pinned":false},{"value":"pacman -U file:///var/cache/pacman/pkg/","recorded":"2025-03-11 19:35:25.890775067","filePath":"null","pinned":false},{"value":"feedback_compile: Assertion `table_len \u003e 0' failed.","recorded":"2025-03-11 19:32:55.478320830","filePath":"null","pinned":false},{"value":"10de:2520","recorded":"2025-03-11 19:28:04.113401081","filePath":"null","pinned":false},{"value":"gamescope --prefer-vk-device 1002:744c --","recorded":"2025-03-11 19:27:55.352068048","filePath":"null","pinned":false},{"value":"lspci -nn | grep \"VGA compatible controller\"","recorded":"2025-03-11 19:27:47.785175530","filePath":"null","pinned":false},{"value":"gamescope --prefer-vk-device 1002:744c -- %command%","recorded":"2025-03-11 19:27:43.350118783","filePath":"null","pinned":false},{"value":"cat /proc/fb","recorded":"2025-03-11 19:27:30.392761350","filePath":"null","pinned":false},{"value":"VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json gamescope -- vkcube","recorded":"2025-03-11 19:26:18.610959018","filePath":"null","pinned":false},{"value":"__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia __VK_LAYER_NV_optimus=NVIDIA_only gamescope -e -f -- steam","recorded":"2025-03-11 19:23:31.083871907","filePath":"null","pinned":false},{"value":"i ~ % pkgfile glxinfo","recorded":"2025-03-11 19:21:50.198004026","filePath":"null","pinned":false},{"value":"pkgfile glxinfo","recorded":"2025-03-11 19:21:45.329417662","filePath":"null","pinned":false},{"value":"setcap 'cap_sys_nice=eip' /usr/bin/gamescope","recorded":"2025-03-11 19:18:12.951596411","filePath":"null","pinned":false},{"value":"vulkan: vkGetPhysicalDeviceFormatProperties2 returned zero modifiers for DRM format 0x38344241","recorded":"2025-03-11 19:18:01.140924024","filePath":"null","pinned":false},{"value":"cat /sys/module/nvidia_drm/parameters/modeset","recorded":"2025-03-11 19:17:46.547684048","filePath":"null","pinned":false},{"value":"grub-mkconfig -o /boot/grub/grub.cfg","recorded":"2025-03-11 19:16:39.917935742","filePath":"null","pinned":false},{"value":"WINEDEBUG=\"+timestamp,+pid,+tid,+seh,+debugstr,+module\"","recorded":"2025-03-11 19:06:47.277761571","filePath":"null","pinned":false},{"value":"DXVK_HDR","recorded":"2025-03-11 19:06:10.930551788","filePath":"null","pinned":false},{"value":"ENABLE_HDR_WSI","recorded":"2025-03-11 19:06:05.373091330","filePath":"null","pinned":false},{"value":"vulkaninfo --summary","recorded":"2025-03-11 19:04:33.312424083","filePath":"null","pinned":false},{"value":"vulkan-validation-layers","recorded":"2025-03-11 19:03:56.792778934","filePath":"null","pinned":false},{"value":"vulkan-tools","recorded":"2025-03-11 19:03:49.367242547","filePath":"null","pinned":false},{"value":"vulkan-icd-loader","recorded":"2025-03-11 19:03:40.805346434","filePath":"null","pinned":false},{"value":"vulkan-extra-tools","recorded":"2025-03-11 19:03:33.459927884","filePath":"null","pinned":false},{"value":"vulkan-extra-layers","recorded":"2025-03-11 19:03:24.426711821","filePath":"null","pinned":false},{"value":"vkd3d","recorded":"2025-03-11 19:03:16.746140436","filePath":"null","pinned":false},{"value":"mangohud","recorded":"2025-03-11 19:02:59.863276931","filePath":"null","pinned":false},{"value":"lib32-vulkan-icd-loader","recorded":"2025-03-11 19:02:50.924538412","filePath":"null","pinned":false},{"value":"lib32-vkd3d","recorded":"2025-03-11 19:02:33.805389873","filePath":"null","pinned":false},{"value":"pacman -Qs vulkan","recorded":"2025-03-11 18:59:28.726934357","filePath":"null","pinned":false},{"value":"gamescope -W 1920 -H 1080 -r 70 -e --force-grab-cursor -- %command%","recorded":"2025-03-11 18:54:35.200608652","filePath":"null","pinned":false},{"value":"LD_PRELOAD= gamescope -w 1920 -h 1080 -W 1920 -H 1080 -e -f -r 144 --force-grab-cursor --backend wayland --adaptive-sync -- game-performance env LD_PRELOAD=\"$LD_PRELOAD\" %command%\n\n","recorded":"2025-03-11 18:44:28.145545208","filePath":"null","pinned":false},{"value":"wasi-libc","recorded":"2025-03-11 18:25:52.178824345","filePath":"null","pinned":false},{"value":"git clone https://github.com/CraneStation/wasi-libc.git","recorded":"2025-03-11 18:25:39.440331041","filePath":"null","pinned":false},{"value":"#include \u003cemscripten/emscripten.h\u003e\n","recorded":"2025-03-11 18:23:39.777110453","filePath":"null","pinned":false},{"value":"mkdir -p ~/.config/user-tmpfiles.d","recorded":"2025-03-11 18:22:19.061602874","filePath":"null","pinned":false},{"value":"andweeb/presence.nvim","recorded":"2025-03-11 18:21:04.481374714","filePath":"null","pinned":false},{"value":"require","recorded":"2025-03-10 23:03:45.041663849","filePath":"null","pinned":false},{"value":"\u003cemscripten.h\u003e","recorded":"2025-03-10 22:54:16.026144237","filePath":"null","pinned":false},{"value":"\u003cemscripten/emscripten.h\u003e","recorded":"2025-03-10 22:54:13.509720818","filePath":"null","pinned":false},{"value":"EMSCRIPTEN_KEEPALIVE","recorded":"2025-03-10 22:52:11.252474791","filePath":"null","pinned":false},{"value":"/home/joswin/git/BrainrotLangC-web/wasm","recorded":"2025-03-10 22:47:45.094804699","filePath":"null","pinned":false},{"value":"sudo ln -s /usr/lib/emscripten/emcc.py /usr/local/bin/","recorded":"2025-03-10 22:46:56.468644507","filePath":"null","pinned":false},{"value":"sudo ln -s /usr/lib/emscripten/emcc /usr/local/bin/","recorded":"2025-03-10 22:46:51.417847130","filePath":"null","pinned":false},{"value":"emcc","recorded":"2025-03-10 22:46:18.348550516","filePath":"null","pinned":false},{"value":"java-environment","recorded":"2025-03-10 22:44:29.978662925","filePath":"null","pinned":false},{"value":"lsmod","recorded":"2025-03-10 22:02:28.013070651","filePath":"null","pinned":false},{"value":"blueman","recorded":"2025-03-10 22:01:27.854625857","filePath":"null","pinned":false},{"value":"temperature","recorded":"2025-03-10 21:58:50.659506055","filePath":"null","pinned":false},{"value":"echo \"%{F#66ffffff}󰂯\"","recorded":"2025-03-10 21:56:14.132306024","filePath":"null","pinned":false},{"value":"󰂯","recorded":"2025-03-10 21:55:25.655121228","filePath":"null","pinned":false},{"value":"bluez-utils","recorded":"2025-03-10 21:51:47.118337147","filePath":"null","pinned":false},{"value":"~/.config/polybar/","recorded":"2025-03-10 21:51:00.588427497","filePath":"null","pinned":false},{"value":"https://github.com/msaitz/polybar-bluetooth/raw/refs/heads/master/toggle_bluetooth.sh","recorded":"2025-03-10 21:50:15.551394255","filePath":"null","pinned":false},{"value":"https://github.com/msaitz/polybar-bluetooth/raw/refs/heads/master/bluetooth.sh","recorded":"2025-03-10 21:50:06.176078386","filePath":"null","pinned":false},{"value":"[module/bluetooth]\ntype = custom/script\nexec = path/to/scripts/bluetooth.sh\ninterval = 2\nclick-left = exec blueberry\nclick-right = exec path/to/scripts/config/polybar/toggle_bluetooth.sh\nformat-padding = 1\nformat-background = #000000\nformat-foreground = #ffffff","recorded":"2025-03-10 21:49:10.015200029","filePath":"null","pinned":false},{"value":"'Compile times over 1000 runs'\\n\");","recorded":"2025-03-10 15:12:15.590912444","filePath":"null","pinned":false},{"value":"    fprintf(gnuplot, \"set title 'Compile times over 1000 runs'\\n\");\n","recorded":"2025-03-10 15:11:57.414530195","filePath":"null","pinned":false},{"value":"Lips Upon a Sword's Edge","recorded":"2025-03-09 23:26:43.017971352","filePath":"null","pinned":false},{"value":"A Perfect Ending Plan of the","recorded":"2025-03-09 23:25:43.695290375","filePath":"null","pinned":false},{"value":"The Perfect Plan for a Fairy-Tale Ending ","recorded":"2025-03-09 23:25:29.747612920","filePath":"null","pinned":false},{"value":"The Perfect Plan for a Fairy-Tale Ending","recorded":"2025-03-09 23:24:48.390271805","filePath":"null","pinned":false},{"value":"https://github.com/joswinjohn/BrainrotLangC","recorded":"2025-03-09 23:13:43.359753424","filePath":"null","pinned":false},{"value":"Average compile time: .00008360s (83.6 microseconds)\nAverage execution time: .00148191s (1.48 miliseconds)","recorded":"2025-03-09 23:13:06.375318341","filePath":"null","pinned":false},{"value":"Average compile time: .00008360s (83.6 microseconds)\n\nAverage execution time: .00148191s (1.48 miliseconds)","recorded":"2025-03-09 23:12:58.174442193","filePath":"null","pinned":false},{"value":"\u003cstyle\u003e\nimg {\n    background-color: #FFFFFF;\n}\n\u003c/style\u003e\n\n","recorded":"2025-03-09 22:28:01.652807806","filePath":"null","pinned":false},{"value":"    color: #FFFFFF;\n","recorded":"2025-03-09 22:25:32.180498720","filePath":"null","pinned":false},{"value":"\u003cimg src=\"comp_times.svg\" style=\"color:white\"\u003e\n","recorded":"2025-03-09 22:14:19.214297164","filePath":"null","pinned":false},{"value":"{\n  \"iamcco/markdown-preview.nvim\",\n  cmd = { \"MarkdownPreviewToggle\", \"MarkdownPreview\", \"MarkdownPreviewStop\" },\n  build = \"cd app \u0026\u0026 yarn install\",\n  init = function()\n    vim.g.mkdp_filetypes = { \"markdown\" }\n  end,\n  ft = { \"markdown\" },\n},","recorded":"2025-03-09 22:08:37.212426340","filePath":"null","pinned":false},{"value":"compil","recorded":"2025-03-09 22:06:23.070065491","filePath":"null","pinned":false},{"value":"[compile time](./comp_times.svg)\n","recorded":"2025-03-09 22:06:20.871445938","filePath":"null","pinned":false},{"value":"[Alt text](./controllers_brief.svg)","recorded":"2025-03-09 22:05:45.394078542","filePath":"null","pinned":false},{"value":"Average compile time: .00008360\nAverage execution time: .00148191\n","recorded":"2025-03-09 22:04:51.172195390","filePath":"null","pinned":false},{"value":"    fprintf(gnuplot, \"set style linecolor rgb \\n\");\n","recorded":"2025-03-09 22:03:30.322853693","filePath":"null","pinned":false},{"value":"    fprintf(gnuplot, \"set xlabel 'Run Number'\\n\");\n","recorded":"2025-03-09 22:02:22.980413504","filePath":"null","pinned":false},{"value":"Average compile time: .00008360\nAverage execution time: .00148191","recorded":"2025-03-09 22:00:47.993330449","filePath":"null","pinned":false},{"value":"Pipe","recorded":"2025-03-09 21:55:22.317266374","filePath":"null","pinned":false},{"value":"dataFile","recorded":"2025-03-09 21:55:15.737830234","filePath":"null","pinned":false},{"value":"    printf(\"Data plotted successfully using gnuplot.\\n\");\n","recorded":"2025-03-09 21:54:43.496031060","filePath":"null","pinned":false},{"value":"    // Close the gnuplot pipe\n","recorded":"2025-03-09 21:54:34.795639192","filePath":"null","pinned":false},{"value":"    // End the plot data\n","recorded":"2025-03-09 21:54:33.690072937","filePath":"null","pinned":false},{"value":"    // Write the data to gnuplot\n","recorded":"2025-03-09 21:54:26.554394262","filePath":"null","pinned":false},{"value":"    // Write gnuplot commands to plot the data\n","recorded":"2025-03-09 21:54:25.181469171","filePath":"null","pinned":false},{"value":"    // Open the gnuplot pipe for plotting\n","recorded":"2025-03-09 21:54:24.350934492","filePath":"null","pinned":false},{"value":"    \n","recorded":"2025-03-09 21:54:22.448437231","filePath":"null","pinned":false},{"value":"    if (gnuplotPipe == NULL) {\n","recorded":"2025-03-09 21:54:21.529389646","filePath":"null","pinned":false},{"value":"        perror(\"Failed to open gnuplot pipe\");\n","recorded":"2025-03-09 21:54:21.081670817","filePath":"null","pinned":false},{"value":"        return -1;\n","recorded":"2025-03-09 21:54:20.513120513","filePath":"null","pinned":false},{"value":"}","recorded":"2025-03-09 21:54:18.398763590","filePath":"null","pinned":false},{"value":"    // Close the CSV file\n","recorded":"2025-03-09 21:53:26.105408718","filePath":"null","pinned":false},{"value":"            // Convert the token to a double and store it in the array\n","recorded":"2025-03-09 21:53:24.173319464","filePath":"null","pinned":false},{"value":"        // Tokenize the line by commas\n","recorded":"2025-03-09 21:53:22.662012075","filePath":"null","pinned":false},{"value":"    // Open the CSV file for reading\n","recorded":"2025-03-09 21:53:15.210442673","filePath":"null","pinned":false},{"value":"    // Read the CSV file line by line and store runtime data\n","recorded":"2025-03-09 21:53:14.565310729","filePath":"null","pinned":false},{"value":"            printf(\"%s\", token);\n","recorded":"2025-03-09 21:51:41.688841329","filePath":"null","pinned":false},{"value":"        printf(\"%s\", token);\n","recorded":"2025-03-09 21:50:53.350904077","filePath":"null","pinned":false},{"value":"char *token;","recorded":"2025-03-09 21:47:59.109158140","filePath":"null","pinned":false},{"value":"if (fgets(line, sizeof(line), dataFile) != NULL) {\n        // Tokenize the line by commas\n        token = strtok(line, \",\");\n        while (token != NULL \u0026\u0026 i \u003c NUM_RUNS) {\n            // Convert the token to a double and store it in the array\n            timeData[i] = strtod(token, NULL);\n            i++;\n            token = strtok(NULL, \",\");\n        }\n    }","recorded":"2025-03-09 21:47:49.956257240","filePath":"null","pinned":false},{"value":"#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003ctime.h\u003e\n\n#define NUM_RUNS 1000\n#define FILENAME \"comp_sum.dat\"\n\nint main() {\n    FILE *dataFile;\n    FILE *gnuplotPipe;\n    double timeData[NUM_RUNS];\n\n    // Open the gnuplot pipe for plotting\n    gnuplotPipe = popen(\"gnuplot -persistent\", \"w\");\n    if (gnuplotPipe == NULL) {\n        perror(\"Failed to open gnuplot pipe\");\n        return 1;\n    }\n\n    // Send gnuplot commands to plot the data\n    fprintf(gnuplotPipe, \"set title 'Time Data over 1000 Runs'\\n\");\n    fprintf(gnuplotPipe, \"set xlabel 'Run Number'\\n\");\n    fprintf(gnuplotPipe, \"set ylabel 'Time (seconds)'\\n\");\n    fprintf(gnuplotPipe, \"plot '%s' using 1:2 with lines title 'Time Data'\\n\", FILENAME);\n\n    // Close the gnuplot pipe\n    fclose(gnuplotPipe);\n\n    return 0;\n}","recorded":"2025-03-09 21:43:29.416948538","filePath":"null","pinned":false},{"value":"#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n\n#define NUM_RUNS 1000\n#define FILENAME \"runtimes.csv\"\n\nint main() {\n    FILE *dataFile;\n    FILE *gnuplotPipe;\n    double timeData[NUM_RUNS];\n    char line[100];\n    int i = 0;\n\n    // Open the CSV file for reading\n    dataFile = fopen(FILENAME, \"r\");\n    if (dataFile == NULL) {\n        perror(\"Failed to open file\");\n        return 1;\n    }\n\n    // Read the CSV file line by line and store runtime data\n    while (fgets(line, sizeof(line), dataFile) != NULL \u0026\u0026 i \u003c NUM_RUNS) {\n        // Parse the line (strip newline and convert to double)\n        timeData[i] = strtod(line, NULL);\n        i++;\n    }\n\n    // Close the CSV file\n    fclose(dataFile);\n\n    if (i != NUM_RUNS) {\n        fprintf(stderr, \"Error: Expected %d runs, but found %d runs in the file.\\n\", NUM_RUNS, i);\n        return 1;\n    }\n\n    // Open the gnuplot pipe for plotting\n    gnuplotPipe = popen(\"gnuplot -persistent\", \"w\");\n    if (gnuplotPipe == NULL) {\n        perror(\"Failed to open gnuplot pipe\");\n        return 1;\n    }\n\n    // Write gnuplot commands to plot the data\n    fprintf(gnuplotPipe, \"set title 'Runtime Data over 1000 Runs'\\n\");\n    fprintf(gnuplotPipe, \"set xlabel 'Run Number'\\n\");\n    fprintf(gnuplotPipe, \"set ylabel 'Runtime (seconds)'\\n\");\n    fprintf(gnuplotPipe, \"plot '-' using 1:2 with lines title 'Runtime'\\n\");\n\n    // Write the data to gnuplot\n    for (int j = 0; j \u003c NUM_RUNS; j++) {\n        fprintf(gnuplotPipe, \"%d %f\\n\", j + 1, timeData[j]);\n    }\n\n    // End the plot data\n    fprintf(gnuplotPipe, \"e\\n\");\n\n    // Close the gnuplot pipe\n    fclose(gnuplotPipe);\n\n    printf(\"Data plotted successfully using gnuplot.\\n\");\n\n    return 0;\n}","recorded":"2025-03-09 21:43:27.001621217","filePath":"null","pinned":false},{"value":"    // Open the data file for writing\n   \n","recorded":"2025-03-09 21:41:18.968211857","filePath":"null","pinned":false},{"value":" dataFile = fopen(FILENAME, \"w\");\n    if (dataFile == NULL) {\n        perror(\"Failed to open file for writing\");\n        return 1;\n    }\n\n    // Simulate or collect time data for NUM_RUNS times\n    srand(time(NULL));  // Seed random number generator\n\n    for (int i = 0; i \u003c NUM_RUNS; i++) {\n        // For example, simulate some \"time\" as a random floating-point value between 0.5 and 2.0 seconds\n        double time = 0.5 + (rand() % 1500) / 1000.0;\n        timeData[i] = time;\n        fprintf(dataFile, \"%d %f\\n\", i+1, time);  // Write run number and corresponding time to the file\n    }\n\n    // Close the file after writing the data\n    fclose(dataFile);\n    printf(\"Data collected in %s\\n\", FILENAME);","recorded":"2025-03-09 21:41:17.242819164","filePath":"null","pinned":false},{"value":"\nrun 134\nrun 135","recorded":"2025-03-09 21:39:36.540693816","filePath":"null","pinned":false},{"value":"\nruns=100\n","recorded":"2025-03-09 21:39:08.178024240","filePath":"null","pinned":false},{"value":"echo \"running $1 times\"\n","recorded":"2025-03-09 21:35:36.816213998","filePath":"null","pinned":false},{"value":"    echo \"running $1 times\"\n","recorded":"2025-03-09 21:35:12.043763921","filePath":"null","pinned":false},{"value":"1","recorded":"2025-03-09 21:33:41.697159679","filePath":"null","pinned":false},{"value":"${array[1]}","recorded":"2025-03-09 21:33:35.329175016","filePath":"null","pinned":false},{"value":"    echo \"$compile_sum\" \u003e\u003e comp_sum.dat\n","recorded":"2025-03-09 21:33:17.655206186","filePath":"null","pinned":false},{"value":"#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003ctime.h\u003e\n\n#define NUM_RUNS 1000\n#define FILENAME \"time_data.dat\"\n\nint main() {\n    FILE *dataFile;\n    FILE *gnuplotPipe;\n    double timeData[NUM_RUNS];\n\n    // Open the data file for writing\n    dataFile = fopen(FILENAME, \"w\");\n    if (dataFile == NULL) {\n        perror(\"Failed to open file for writing\");\n        return 1;\n    }\n\n    // Simulate or collect time data for NUM_RUNS times\n    srand(time(NULL));  // Seed random number generator\n\n    for (int i = 0; i \u003c NUM_RUNS; i++) {\n        // For example, simulate some \"time\" as a random floating-point value between 0.5 and 2.0 seconds\n        double time = 0.5 + (rand() % 1500) / 1000.0;\n        timeData[i] = time;\n        fprintf(dataFile, \"%d %f\\n\", i+1, time);  // Write run number and corresponding time to the file\n    }\n\n    // Close the file after writing the data\n    fclose(dataFile);\n    printf(\"Data collected in %s\\n\", FILENAME);\n\n    // Open the gnuplot pipe for plotting\n    gnuplotPipe = popen(\"gnuplot -persistent\", \"w\");\n    if (gnuplotPipe == NULL) {\n        perror(\"Failed to open gnuplot pipe\");\n        return 1;\n    }\n\n    // Send gnuplot commands to plot the data\n    fprintf(gnuplotPipe, \"set title 'Time Data over 1000 Runs'\\n\");\n    fprintf(gnuplotPipe, \"set xlabel 'Run Number'\\n\");\n    fprintf(gnuplotPipe, \"set ylabel 'Time (seconds)'\\n\");\n    fprintf(gnuplotPipe, \"plot '%s' using 1:2 with lines title 'Time Data'\\n\", FILENAME);\n\n    // Close the gnuplot pipe\n    fclose(gnuplotPipe);\n\n    return 0;\n}","recorded":"2025-03-09 21:32:06.267385589","filePath":"null","pinned":false},{"value":".00008249","recorded":"2025-03-09 21:27:12.649117735","filePath":"null","pinned":false},{"value":".00133491","recorded":"2025-03-09 21:26:32.924767423","filePath":"null","pinned":false},{"value":"0013349","recorded":"2025-03-09 21:26:30.204810358","filePath":"null","pinned":false},{"value":"    echo $compile_sum\n","recorded":"2025-03-09 21:26:12.852567575","filePath":"null","pinned":false},{"value":".008169","recorded":"2025-03-09 21:24:42.532545576","filePath":"null","pinned":false},{"value":"    #IFS=$'\\n' bar=$(./brlc test.brl | awk '{print $3}')\n","recorded":"2025-03-09 21:23:16.896438927","filePath":"null","pinned":false},{"value":"    echo \"${array[1]}\"\n","recorded":"2025-03-09 21:23:14.657816388","filePath":"null","pinned":false},{"value":"$(./brlc test.brl | awk '{print $3}')","recorded":"2025-03-09 21:22:31.910328062","filePath":"null","pinned":false},{"value":"readarray -t array \u003c\u003c\u003c \"$string\"","recorded":"2025-03-09 21:22:19.179510734","filePath":"null","pinned":false},{"value":"    output=\n","recorded":"2025-03-09 21:21:15.604697133","filePath":"null","pinned":false},{"value":"(\"$output\")\n","recorded":"2025-03-09 21:21:08.267648046","filePath":"null","pinned":false},{"value":"${bar[1]}","recorded":"2025-03-09 21:20:11.201620435","filePath":"null","pinned":false},{"value":"compile","recorded":"2025-03-09 21:18:30.486231036","filePath":"null","pinned":false},{"value":"    sum=$(echo \"$compile_sum + ${bar[0]}\" | bc)\n","recorded":"2025-03-09 21:18:19.701795381","filePath":"null","pinned":false},{"value":"compile_average=$(echo \"scale=2; $sum / 100\" | bc)\n","recorded":"2025-03-09 21:18:00.453485333","filePath":"null","pinned":false},{"value":"echo \"Average compile time: $compile_average\"\n","recorded":"2025-03-09 21:17:45.785569938","filePath":"null","pinned":false},{"value":"    echo \"${bar[1]}\"\n","recorded":"2025-03-09 21:17:13.774515276","filePath":"null","pinned":false},{"value":"    set -o noglob         # See special Note, below.\n","recorded":"2025-03-09 21:16:35.925929148","filePath":"null","pinned":false},{"value":"    set +o noglob \n","recorded":"2025-03-09 21:16:34.716803289","filePath":"null","pinned":false},{"value":"echo ${#bar[@]}\n","recorded":"2025-03-09 21:15:16.462895775","filePath":"null","pinned":false},{"value":"output=$(./brlc test.brl | awk '{print $3}')\n    set -o noglob         # See special Note, below.\n    IFS=$'\\n' bar=($output)\n    set +o noglob \n    echo \"[0] = $(bar[0])\"\n    sum=$(echo \"$sum + $output\" | bc)","recorded":"2025-03-09 21:12:24.661245666","filePath":"null","pinned":false},{"value":"man 7 glob","recorded":"2025-03-09 21:11:46.312934502","filePath":"null","pinned":false},{"value":"output=$(./brlc test.brl | awk '{print $3}')\n    set -o noglob         # See special Note, below.\n    IFS=$'\\n' bar=($output)\n    set +o noglob \n    echo \"[0] = $(bar[0])\"","recorded":"2025-03-09 21:11:36.885446840","filePath":"null","pinned":false},{"value":"    echo \"[0] = $(bar[0])\"\n","recorded":"2025-03-09 21:10:57.741447284","filePath":"null","pinned":false},{"value":"set -o noglob         # See special Note, below.\nIFS=$'\\n' bar=($foo)\nset +o noglob ","recorded":"2025-03-09 21:08:50.717355956","filePath":"null","pinned":false},{"value":"IFS=$'\\n' read -d '' -r -a bar \u003c\u003c\u003c\"$foo\"","recorded":"2025-03-09 21:07:06.715075611","filePath":"null","pinned":false},{"value":"./brlc test.brl | awk '{print $3}'","recorded":"2025-03-09 21:05:16.430619152","filePath":"null","pinned":false},{"value":"# Print the average\n","recorded":"2025-03-09 21:03:59.488452833","filePath":"null","pinned":false},{"value":"# Calculate the average\n","recorded":"2025-03-09 21:03:58.713852073","filePath":"null","pinned":false},{"value":"    # Add the output to the sum\n","recorded":"2025-03-09 21:03:50.920003761","filePath":"null","pinned":false},{"value":"    # Run the command and store its output (assuming it's a float)\n","recorded":"2025-03-09 21:03:50.109200412","filePath":"null","pinned":false},{"value":"# Run the command 100 times\n","recorded":"2025-03-09 21:03:38.179231421","filePath":"null","pinned":false},{"value":"# Initialize a variable to hold the sum of all outputs\n","recorded":"2025-03-09 21:03:37.248492654","filePath":"null","pinned":false},{"value":"#!/bin/bash\n\n# Initialize a variable to hold the sum of all outputs\nsum=0\n\n# Run the command 100 times\nfor i in {1..100}\ndo\n    # Run the command and store its output (assuming it's a float)\n    output=$(brlc)\n\n    # Add the output to the sum\n    sum=$(echo \"$sum + $output\" | bc)\ndone\n\n# Calculate the average\naverage=$(echo \"scale=2; $sum / 100\" | bc)\n\n# Print the average\necho \"Average of 100 runs: $average\"","recorded":"2025-03-09 21:02:24.615800634","filePath":"null","pinned":false},{"value":"sum=0\n\n# Run the command 100 times\nfor i in {1..100}\ndo\n    # Run the command and store its output (assuming it's a float)\n    output=$(brlc)\n\n    # Add the output to the sum\n    sum=$(echo \"$sum + $output\" | bc)\ndone\n\n# Calculate the average\naverage=$(echo \"scale=2; $sum / 100\" | bc)\n\n# Print the average\necho \"Average of 100 runs: $average\"\n","recorded":"2025-03-09 21:02:22.594117351","filePath":"null","pinned":false},{"value":"https://github.com/aLEGEND21/BrainrotLan\n","recorded":"2025-03-09 16:28:19.153746816","filePath":"null","pinned":false},{"value":"https://github.com/aLEGEND21/BrainrotLang","recorded":"2025-03-09 16:27:17.175812028","filePath":"null","pinned":false},{"value":"0.000926","recorded":"2025-03-09 16:26:15.505560294","filePath":"null","pinned":false},{"value":"0.000075","recorded":"2025-03-09 16:25:48.336001709","filePath":"null","pinned":false},{"value":"0.001194","recorded":"2025-03-09 16:25:26.334087382","filePath":"null","pinned":false},{"value":"if (fp == NULL) {\n        printf(\"Failed to run command\\n\" );\n        exit(1);\n    }","recorded":"2025-03-09 16:24:58.180788396","filePath":"null","pinned":false},{"value":"exec_time","recorded":"2025-03-09 16:23:39.002487838","filePath":"null","pinned":false},{"value":"    printf(\"%s\", path);\n","recorded":"2025-03-09 16:23:19.597219737","filePath":"null","pinned":false},{"value":"    /* Read the output a line at a time - output it. */\n","recorded":"2025-03-09 16:22:49.314233260","filePath":"null","pinned":false},{"value":"    while ( != NULL) {\n    }\n","recorded":"2025-03-09 16:22:38.175325152","filePath":"null","pinned":false},{"value":"        printf(\"%s\", path);\n","recorded":"2025-03-09 16:22:34.073722742","filePath":"null","pinned":false},{"value":"fgets(path, sizeof(path), fp)","recorded":"2025-03-09 16:22:27.739718513","filePath":"null","pinned":false},{"value":"    system(\"\");\n","recorded":"2025-03-09 16:22:04.110566986","filePath":"null","pinned":false},{"value":"/bin/ls /etc/","recorded":"2025-03-09 16:22:01.572139139","filePath":"null","pinned":false},{"value":"strace -c node out.js 2\u003e\u00261 | awk \\'END{print $2}\\'","recorded":"2025-03-09 16:21:59.352595828","filePath":"null","pinned":false},{"value":"    return 0;\n","recorded":"2025-03-09 16:21:48.315985025","filePath":"null","pinned":false},{"value":"    /* close */\n","recorded":"2025-03-09 16:21:43.314348262","filePath":"null","pinned":false},{"value":"FILE *fp;\n  char path[1035];\n\n  /* Open the command for reading. */\n  fp = popen(\"/bin/ls /etc/\", \"r\");\n  if (fp == NULL) {\n    printf(\"Failed to run command\\n\" );\n    exit(1);\n  }\n\n  /* Read the output a line at a time - output it. */\n  while (fgets(path, sizeof(path), fp) != NULL) {\n    printf(\"%s\", path);\n  }\n\n  /* close */\n  pclose(fp);\n\n  return 0;","recorded":"2025-03-09 16:21:07.782069446","filePath":"null","pinned":false},{"value":"    clock_t end_execution = clock();\n","recorded":"2025-03-09 16:20:43.244025568","filePath":"null","pinned":false},{"value":"strace -c gcc main.c 2\u003e\u00261 | awk 'END{print $2}'","recorded":"2025-03-09 16:19:17.961635206","filePath":"null","pinned":false},{"value":"bash get only total time from strace -c","recorded":"2025-03-09 16:16:59.950527654","filePath":"null","pinned":false},{"value":"strace -c","recorded":"2025-03-09 16:11:45.870404090","filePath":"null","pinned":false},{"value":"    printf(\"%s\\t%f\\n\", \"compile time: \", (double)(end_compile - start_compile) / CLOCKS_PER_SEC);\n","recorded":"2025-03-09 16:11:14.509011639","filePath":"null","pinned":false},{"value":"/* Read 1 chunk of size bytes from fp into buffer */","recorded":"2025-03-09 16:10:25.724464903","filePath":"null","pinned":false},{"value":"/* size + 1 byte for the \\0 */","recorded":"2025-03-09 16:05:51.956406119","filePath":"null","pinned":false},{"value":"(double)(end - begin) / CLOCKS_PER_SEC","recorded":"2025-03-09 16:05:02.577483500","filePath":"null","pinned":false},{"value":"fp_src","recorded":"2025-03-09 16:00:53.780329348","filePath":"null","pinned":false},{"value":"fp","recorded":"2025-03-09 16:00:47.805501475","filePath":"null","pinned":false},{"value":"    // start compile timer\n    clock_t start = clock();\n","recorded":"2025-03-09 16:00:03.373083538","filePath":"null","pinned":false},{"value":"    clock_t start = clock();\n","recorded":"2025-03-09 15:59:10.364576478","filePath":"null","pinned":false},{"value":"    char *insert_point = \u0026buffer[0];\n","recorded":"2025-03-09 15:58:21.504787492","filePath":"null","pinned":false},{"value":"    const char *tmp = src;\n","recorded":"2025-03-09 15:56:56.215799343","filePath":"null","pinned":false},{"value":"aliases[i][1]","recorded":"2025-03-09 15:56:33.877645105","filePath":"null","pinned":false},{"value":"        size_t needle_len = strlen(needle);\n","recorded":"2025-03-09 15:56:27.521480524","filePath":"null","pinned":false},{"value":"size_t needle_len = strlen(needle);\n    size_t repl_len = strlen(replacement);\n\n    while (1) {\n        const char *p = strstr(tmp, needle);\n\n        // walked past last occurrence of needle; copy remaining part\n        if (p == NULL) {\n            strcpy(insert_point, tmp);\n            break;\n        }\n\n        // copy part before needle\n        memcpy(insert_point, tmp, p - tmp);\n        insert_point += p - tmp;\n\n        // copy replacement string\n        memcpy(insert_point, replacement, repl_len);\n        insert_point += repl_len;\n\n        // adjust pointers, move on\n        tmp = p + needle_len;\n    }\n\n    // write altered string back to target\n    strcpy(target, buffer);","recorded":"2025-03-09 15:55:43.662493181","filePath":"null","pinned":false},{"value":"char buffer[1024] = { 0 };\n    char *insert_point = \u0026buffer[0];\n    const char *tmp = target;\n    size_t needle_len = strlen(needle);\n    size_t repl_len = strlen(replacement);\n\n    while (1) {\n        const char *p = strstr(tmp, needle);\n\n        // walked past last occurrence of needle; copy remaining part\n        if (p == NULL) {\n            strcpy(insert_point, tmp);\n            break;\n        }\n\n        // copy part before needle\n        memcpy(insert_point, tmp, p - tmp);\n        insert_point += p - tmp;\n\n        // copy replacement string\n        memcpy(insert_point, replacement, repl_len);\n        insert_point += repl_len;\n\n        // adjust pointers, move on\n        tmp = p + needle_len;\n    }\n\n    // write altered string back to target\n    strcpy(target, buffer);","recorded":"2025-03-09 15:54:45.821598986","filePath":"null","pinned":false},{"value":"https://stackoverflow.com/questions/32413667/replace-all-occurrences-of-a-substring-in-a-string-in-c","recorded":"2025-03-09 15:54:38.234486274","filePath":"null","pinned":false},{"value":"]","recorded":"2025-03-09 15:54:11.794923396","filePath":"null","pinned":false},{"value":"\", ","recorded":"2025-03-09 15:54:01.796094701","filePath":"null","pinned":false},{"value":"your_file_name","recorded":"2025-03-09 15:54:00.914041529","filePath":"null","pinned":false},{"value":"(\"","recorded":"2025-03-09 15:53:56.928757096","filePath":"null","pinned":false},{"value":"    /* Open your_file in read-only mode */\n","recorded":"2025-03-09 15:53:40.037131837","filePath":"null","pinned":false},{"value":"    /* Get the buffer size */\n","recorded":"2025-03-09 15:53:31.181578204","filePath":"null","pinned":false},{"value":" /* Go to end of file */","recorded":"2025-03-09 15:53:29.769348332","filePath":"null","pinned":false},{"value":" /* How many bytes did we pass ? */","recorded":"2025-03-09 15:53:27.985458908","filePath":"null","pinned":false},{"value":"    /* Set position of stream to the beginning */\n","recorded":"2025-03-09 15:53:18.149280209","filePath":"null","pinned":false},{"value":"    /* Allocate the buffer (no need to initialize it with calloc) */\n","recorded":"2025-03-09 15:52:52.117396571","filePath":"null","pinned":false},{"value":"\n    /* NULL-terminate the buffer */\n","recorded":"2025-03-09 15:52:33.046038247","filePath":"null","pinned":false},{"value":"\n    /* Read the file into the buffer */\n","recorded":"2025-03-09 15:52:31.816809519","filePath":"null","pinned":false},{"value":"    /* Print it ! */\n    printf(\"%s\\n\", src);\n","recorded":"2025-03-09 15:52:26.984434325","filePath":"null","pinned":false},{"value":"s","recorded":"2025-03-09 15:52:06.250430675","filePath":"null","pinned":false},{"value":"char *buffer = NULL;\nsize_t size = 0;\n\n/* Open your_file in read-only mode */\nFILE *fp = fopen(\"your_file_name\", \"r\");\n\n/* Get the buffer size */\nfseek(fp, 0, SEEK_END); /* Go to end of file */\nsize = ftell(fp); /* How many bytes did we pass ? */\n\n/* Set position of stream to the beginning */\nrewind(fp);\n\n/* Allocate the buffer (no need to initialize it with calloc) */\nbuffer = malloc((size + 1) * sizeof(*buffer)); /* size + 1 byte for the \\0 */\n\n/* Read the file into the buffer */\nfread(buffer, size, 1, fp); /* Read 1 chunk of size bytes from fp into buffer */\n\n/* NULL-terminate the buffer */\nbuffer[size] = '\\0';\n\n/* Print it ! */\nprintf(\"%s\\n\", buffer);","recorded":"2025-03-09 15:51:53.479006560","filePath":"null","pinned":false},{"value":"https://stackoverflow.com/questions/22697407/reading-text-file-into-char-array","recorded":"2025-03-09 15:51:45.800080236","filePath":"null","pinned":false},{"value":"https://www.google.com/search?q=check+if+file+exists+before+opening+c%2B%2B\u0026oq=check+if+file+exists+before+opening+c%2B%2B\u0026gs_lcrp=EgZjaHJvbWUyBggAEEUYOTIICAEQABgWGB4yDQgCEAAYhgMYgAQYigUyCggDEAAYogQYiQUyBwgEEAAY7wXSAQg1NzczajBqN6gCALACAA\u0026sourceid=chrome\u0026ie=UTF-8","recorded":"2025-03-09 15:50:05.670401914","filePath":"null","pinned":false},{"value":"https://stackoverflow.com/questions/12774207/fastest-way-to-check-if-a-file-exists-using-standard-c-c11-14-17-c","recorded":"2025-03-09 15:49:55.383164241","filePath":"null","pinned":false},{"value":"Add the following commands t","recorded":"2025-03-09 15:48:33.870294266","filePath":"null","pinned":false},{"value":"clipse -listen","recorded":"2025-03-09 15:48:30.393314889","filePath":"null","pinned":false}]}